# Requerimientos
# - Docker
# - Minikube

# 1. Estos comandos son sólo para depurar la aplicación; no es necesario
#    ejecutarlos si la demo funciona corectamente. Esta demo está configurada
#    para ser ejecutada desde la raíz de la carpeta del proyecto.

# Crear un entorno virtual y activarlo
python3 -m venv venv
source venv/bin/activate

# Instalar dependencias
pip3 install -r ./orders-service/requirements.txt
pip3 install -r ./products-service/requirements.txt
pip3 install -r ./users-service/requirements.txt

# Borra los datos de las bases de datos en caso de que sea necesario; no borres
# estas carpetas si quieres conservar los datos de una ejecucion anterior.
rm -rf ./orders-service/mysqldata
rm -rf ./products-service/mongodbdata
rm -rf ./users-service/pgdata

# Iniciar Docker si no está iniciado
docker desktop start

# Levanta el contenedor con las bases de datos correspondientes a cada servicio
docker compose -f ./orders-service/docker-compose.yaml up --build orders-db -d
docker compose -f ./products-service/docker-compose.yaml up --build products-db -d
docker compose -f ./users-service/docker-compose.yaml up --build users-db -d

# Asegúrate de que el IDE está usando la versión de Python del entorno virtual
# creado anteriormente; ejecuta Cmd+Shift+P o Ctrl+Shift+P y selecciona
# "Python: Select Interpreter" o "Python: Seleccionar Intérprete"; luego elige
# el intérprete que corresponde a la carpeta `venv` creada anteriormente.

# Iniciar la depuración de uno de los servicios; y luego ejecutar en una nueva
# terminal el comando correspondiente para probar que el servicio está
# funcionando y se puede conectar a la base de datos:
curl "http://localhost:8000/orders/"
curl "http://localhost:8001/products/"
curl "http://localhost:8002/users/"

# 2.a. Estos comandos son para ejecutar el servicio de órdenes y probarlo en
# Docker

# Borra los datos de la base de datos; no borres esta carpeta si quieres
# conservar los datos de una ejecucion anterior.
rm -rf ./orders-service/mysqldata

# Iniciar Docker si no está iniciado
docker desktop start

# Levantar los dos servicios: la base de datos y el servicio de órdenes
docker compose -f ./orders-service/docker-compose.yaml up --build -d

# Prueba la conexión a la base de datos; te va a pedir una contraseña, mira el
# archivo '.env' en la carpeta 'orders-service' para saber cuál es.
docker exec -it orders-service-orders-db-1 mysql -u user -p ordersdb -e "SELECT * FROM orders;"

# Probar el servicio. Puedes ver y probar todos los endpoints en
# http://localhost:8000/docs
curl "http://localhost:8000/orders/"

# 2.b. Estos comandos son para ejecutar el servicio de productos y probarlo en
# Docker

# Borra los datos de la base de datos; no borres esta carpeta si quieres
# conservar los datos de una ejecucion anterior.
rm -rf ./products-service/mongodbdata

# Iniciar Docker si no está iniciado
docker desktop start

# Levantar los dos servicios: la base de datos y el servicio de productos
docker compose -f ./products-service/docker-compose.yaml up --build -d

# Probar el servicio. Puedes ver y probar todos los endpoints en
# http://localhost:8001/docs
curl "http://localhost:8001/products/"

# 2.c. Estos comandos son para ejecutar el servicio de usuarios y probarlo en
# Docker

# Borra los datos de la base de datos; no borrar esta carpeta si se quiere
# conversar los datos de una ejecucion anterior.
rm -rf ./users-service/pgdata

# Iniciar Docker si no está iniciado
docker desktop start

# Levantar los dos servicios: la base de datos y el servicio de usuarios
docker compose -f ./users-service/docker-compose.yaml up --build -d

# Probar la conexión a la base de datos; te va a pedir una contraseña, mira el
# archivo '.env' en la carpeta 'users-service' para saber cuál es.
psql -h localhost -p 5432 -U usersusr -d usersdb -c "SELECT * FROM users;"

curl "http://localhost:8002/users/"

# 2.d Estos comandos son para detener los contenedores antes de pasar a la
# siguiente parte 3
docker stop $(docker ps -q)

# 3. Levantar el API Gateway y probarlo
docker compose up -d

curl "http://localhost:8000/orders/"
curl "http://localhost:8001/products/"
curl "http://localhost:8002/users/"

# 4. Kubernets

# Levantar las bases de datos en Docker, que no están en el clúster de Kubernets
docker-compose up -d

docker exec -it andis2_ut1_demo6-orders-db-1 mysql -u user -p ordersdb -e "SELECT * FROM orders;"
docker exec -it andis2_ut1_demo6-users-db-1 psql -h localhost -p 5432 -U usersusr -d usersdb -c "SELECT * FROM users;"
docker exec -it andis2_ut1_demo6-products-db-1 mongosh "mongodb://productsusr:Pa55w0rd@localhost:27017/productsdb" --eval "db.products.find().pretty()"

# Iniciar Kubernest
minikube start
eval $(minikube -p minikube docker-env)

# Crear las imágenes en caso de que no estuvieran creadas
docker build -t orders-service:latest ./orders-service
docker build -t products-service:latest ./products-service
docker build -t users-service:latest ./users-service


# Levantar todos los servicios
kubectl create configmap nginx-config --from-file=nginx.conf=api-gateway/ngixconf/ngix.conf

kubectl apply -f users-service/users-deployment.yaml
kubectl apply -f users-service/users-service.yaml
kubectl apply -f products-service/products-deployment.yaml
kubectl apply -f products-service/products-service.yaml
kubectl apply -f orders-service/orders-deployment.yaml
kubectl apply -f orders-service/orders-service.yaml
kubectl apply -f api-gateway/api-gateway-deployment.yaml
kubectl apply -f api-gateway/api-gateway-service.yaml

# Verificar el despliegue
kubectl get pods
kubectl get services

# Probar cada uno de los servicios por separado; ejecutar el segundo comadno en
# otra terminal
kubectl port-forward service/orders-service 9000:8000
curl http://localhost:9000/orders/

kubectl port-forward service/products-service 9001:8000
curl http://localhost:9001/products/

kubectl port-forward service/users-service 9002:8000
curl http://localhost:9002/users/

# en una terminarl nueva

minikube service api-gateway


curl http://localhost:8080/orders

 http://127.0.0.1:55924/orders


minikube ip

# Obtener la información del gateway en el clúster; anota el puerto
kubectl get service api-gateway

# Prueba el acceso a los endpoints
curl "http://192.168.49.2:30676/orders/"

curl http://192.168.49.2:30676/orders

# Debug

minikube stop

minikube service api-gateway

kubectl describe pod orders-service-6f4567cd89-4r9sc

kubectl delete deployment orders-service products-service users-service api-gateway
kubectl delete service orders-service products-service users-service api-gateway


